* Node class
  This class is made to store the information of coordinates of nodes.
  Written by IkJung Yun. <2012-01-11 ìˆ˜>
  ijloved At Gmail Dot Com.

|-------------------------------------------------------------------+-------------------------------------------------------|
| Node class -- Abstract structure                                  | Node_2D                                               |
|-------------------------------------------------------------------+-------------------------------------------------------|
| To postpone the declaration of the  array holding coordinates     |                                                       |
| of nodes until proper class is established,                       |                                                       |
| such as Node_2D and Node_3D,                                      |                                                       |
| this class is made to an abstract class.                          |                                                       |
|-------------------------------------------------------------------+-------------------------------------------------------|
| static unsigned int m_ticket;                                     | static const int n_dof = two_D;                       |
| unsigned int m_id;                                                | DATA_TYPE m_pos[n_dof];                               |
|-------------------------------------------------------------------+-------------------------------------------------------|
| Node(void)                                                        | Node_2D(void)                                         |
| Node(const Node & target)                                         | Node_2D(const DATA_TYPE * const pos)                  |
|                                                                   | Node_2D(const Node_2D & target) : Node(target)        |
| virtual Node & operator = (const Node & target)                   | virtual Node_2D & operator = (const Node_2D & target) |
| virtual bool operator == (const Node & target)                    | virtual bool operator == (const Node_2D & target)     |
| virtual ~Node(void)                                               | virtual ~Node_2D(void)                                |
| static const int get_ticket(void)                                 |                                                       |
| const int get_id(void) const                                      |                                                       |
|                                                                   | static const int get_dof(void)                        |
|                                                                   | static const string & get_name(void)                  |
|                                                                   |                                                       |
| virtual const DATA_TYPE get_pos(const int loc) const = 0;         | const DATA_TYPE get_pos(const int loc)                |
| virtual void set_pos(const BEM_LOC loc, const DATA_TYPE val) = 0; | void set_pos(const BEM_LOC loc, const DATA_TYPE val)  |
| virtual ostream & info_class(ostream & os = cout) = 0;            | ostream & info_class(ostream & os = cout)             |
| virtual ostream & info(ostream & os = cout) = 0;                  | ostream & info(ostream & os = cout)                   |
|-------------------------------------------------------------------+-------------------------------------------------------|

* Members
** Node Class's Member
   Two members are defined because there is no way to redefin the number of degree of freedom
   which is used to declare the size of array holding information of node coordinates.
   Consequently, the number of degree of freedom and an array are declared in child classes.
   Currently, Node\_2D class is only defined.

***  static unsigned int m\_ticket:
     number of created instance, initialized as zero in node.cpp
     This value is not unique. Because destuction of instance reduce the ticket by onem on the
     other hand creation of instance add the ticket by one.
***  unsigned int m\_id:
     node id, is used to identified the instance of node.
     This value is no unique, it can be duplicated by copy or assignment operator(=).
     If two instances have same id number then the position of instances is also same. However
     converse does not satisfied.

** Node\_2D Class's Member
***  static const int n\_dof = two_D:
     number of degree of freedom, two is defined enum \_LOC\_TAG (temporarily)
***  static string m\_name
     Node class's name, initialized as "2D Node Class" in node.h
***  DATA\_TYPE m\_pos[n\_dof]:
     contains the position data of nodes. its dimension depends on the
     degree of freedom of analysis.

* Codes

** node.h
#+BEGIN_SRC
// KEEPER_BEM_NODE -- a class to handle the coordinate of node.
//
// Author: IkJung Yun

// Written from 2012.01.10.

#include <iostream>
#include <string.h>
#include <stdlib.h>

using std::cout;
using std::endl;
using std::string;
using std::ostream;

#ifndef BEM_NODE_H_
#define BEM_NODE_H_

namespace BEM_NODE{

  // This variable is declared here temporarily.
  // As more classes is implemented, it will be moved to more proper class.
  // Tentatively, I think a header file having the definition of constants will be required.
  typedef double DATA_TYPE;

  // degree of freedom
  typedef enum _DOF_TAG{one_D = 1, two_D = 2, three_D = 3} BEM_DOF;

  // coordinates
  typedef enum _LOC_TAG{x = 0, y = 1, z = 2} BEM_LOC;

  // String Constant
  static const string node_name_2D = "2D Node Class";

  inline const char *  string_location(BEM_LOC loc) {
    static const char * const m_x = "x";
    static const char * const m_y = "y";
    static const char * const m_z = "z";
    switch(loc){
    case x :
      return m_x;
    case y :
      return m_y;
    case z :
      return m_z;
    default:
      cout << "Error: Analysis dimension should be less than 3 dimension, "
           << "current dimension is " << loc << endl;
      exit(8);
    }
    cout << "Internal failure is occured in string_location(BEM_LOC loc)" << endl;
    exit(8);
    return NULL; // never reached this points
  }



  /*
    ---------------------------------------------------------------------
    Node class -- Abstract structure
      To postpone the declaration of the array holding coordinates of nodes until proper class
      is established, such as Node_2D and Node_3D, this class is made to an abstract class.
    ---------------------------------------------------------------------
    Member
      static unsigned int m_ticket;
      unsigned int m_id;
    ---------------------------------------------------------------------
    Functions
      Node(void)
      Node(const Node & target)
      virtual Node & operator = (const Node & target)
      virtual bool operator == (const Node & target)
      virtual ~Node(void){--m_ticket;}
      static const int get_ticket(void) {return m_ticket;}
      const int get_id(void) const {return m_id;}
      virtual const DATA_TYPE get_pos(const int loc) const = 0;
      virtual void set_pos(const BEM_LOC loc, const DATA_TYPE val) = 0;
    ---------------------------------------------------------------------
  */
  class Node{
  protected :
    // number of created instance
    static unsigned int m_ticket;
    // node id, not unique value but if two instances have same id number then the position of
    // instances is also same. However converse does not satisfied.
    unsigned int m_id;

  public :
    // Default Constructor -- increase m_ticket by one and  set m_id equal to m_ticket
    Node(void) : m_id(++m_ticket){;}
    // Copy Constructor
    Node(const Node & target) {
      ++m_ticket;
       m_id = target.m_id;
    }
    // Operator overloading for =
    virtual Node & operator = (const Node & target){
      m_id = target.m_id;
      return (*this);
    }
    // Operator overloading for ==
    virtual bool operator == (const Node & target) const {
      if(m_id == target.m_id)
        return (true);
      else return (false);
    }
    // Destructor - nothing but declared as virtual for later use.a
    virtual ~Node(void){--m_ticket;}

    // get functions //
    static const int get_ticket(void) {return m_ticket;} // return ticket number of node
    const int get_id(void) const {return m_id;} // return node id
    virtual const DATA_TYPE get_pos(const int loc) const = 0;

    // set functions //
    virtual void set_pos(const BEM_LOC loc, const DATA_TYPE val) = 0;
  };


  /*
    ---------------------------------------------------------------------
    Node_2D class -- is derived from Node class
      static const int n_dof = two_D;
      DATA_TYPE m_pos[n_dof];
      are declared.
    ---------------------------------------------------------------------
    Member
      (base) static unsigned int m_ticket;
      (base) unsigned int m_id;
      static const int n_dof = two_D;
      DATA_TYPE m_pos[n_dof];
    ---------------------------------------------------------------------
    Functions
    Node_2D(void)
    Node_2D(const DATA_TYPE * const pos)
    Node_2D(const Node_2D & target) : Node(target)
    virtual Node_2D & operator = (const Node_2D & target)
    virtual bool operator == (const Node_2D & target)
    virtual ~Node_2D(void)
    static const int get_dof(void)
    static const string & get_name(void)
    const DATA_TYPE get_pos(const int loc)
    void set_pos(const BEM_LOC loc, const DATA_TYPE val)
    ostream & info_class(ostream & os = cout)
    ostream & info(ostream & os = cout)
    ---------------------------------------------------------------------
  */
  class Node_2D : public Node{
  private :
    static const int n_dof = two_D; // number of degree of freedom
    DATA_TYPE m_pos[n_dof];         // 2D coordinates of point

  public :
    // Default Constructor - initialize m_pos as zero.
    Node_2D(void){
      for(int i=0; i<n_dof;++i)
        *(m_pos+i)= 0.0;
    }

    // Constructor 2 -- Input coordinates data as a parameter
    // Warning : This constructor doesn't check the dimension of an inputted array.
    Node_2D(const DATA_TYPE * const pos) {
      for(int i=0;i<n_dof;++i)
        *(m_pos+i) = *(pos+i);
    }

    // Copy Constructor
    Node_2D(const Node_2D & target) : Node(target){
      *this = target; // use operator =
    }

    // Operator overloading for =
    virtual Node_2D & operator = (const Node_2D & target){
      m_id = target.m_id;
      for(int i=0;i<n_dof;++i )
        *(m_pos+i) = *(target.m_pos+i);
      return (*this);
    }

    // Operator overloading for ==
    virtual bool operator == (const Node_2D & target) const{
      if(m_id != target.m_id)
        return false;
      for(int i=0;i<n_dof;++i )
        if(*(m_pos+i) != *(target.m_pos+i))
          return false;
      return (true);
    }

    // Destructor - nothing but declared as virtual for later use.
    virtual ~Node_2D(void){;}

    // get functions
    static const int get_dof(void) {return n_dof;} // return the number of DOF.
    static const string & get_name(void) {return node_name_2D;} //return the name of class
    const DATA_TYPE get_pos(const int loc) const { return m_pos[loc];} // return the coordinate
                                                                       // of the node.
    // set functions
    // change the coordinate of node
    void set_pos(const BEM_LOC loc, const DATA_TYPE val){
      if(loc>=n_dof){
        cout << "Error: " << string_location(loc) << " is not in the bound of analysis dimension" << endl;
        exit(8);
      }
      m_pos[loc] =val;
    }

    // print total number of created node which is existing and analysis dimension
    static ostream & info_class(ostream & os = cout);
    // print node id and coordinate
    ostream & info(ostream & os = cout);

  };
}

#+END_SRC

** node.cpp
#+BEGIN_SRC
#include "node.h"
#include <iomanip>

using namespace BEM_NODE;
using std::setw;

// Total number of node class' instance,  this is defined as static
unsigned int Node::m_ticket = 0;

// Print total number of created node which is existing and analysis dimension.
ostream & Node_2D::info_class(ostream & os){
  os << node_name_2D << " class has " // Print Node name
     << "total " << m_ticket    // Print total number of Node
     << " node that lies in " << n_dof <<" dimension." << endl; // Print analysis dimension
  return os;
}

// Print a id number and coordinates of a specific node instance
// Using formatted data such as %d node position [ %4f, %4f, %4f ].
ostream & Node_2D::info(ostream & os){
  os << " " << m_id << " node position [ ";
  os << setw(4);
  for(int i = 0; i < n_dof-1; ++i){
    os << *(m_pos + i) << " , " ;
  }
  os << *(m_pos+n_dof-1) << " ]." << endl;
  return os;
}


#+END_SRC

** node_test.cpp
#+BEGIN_SRC
#include <iostream>
#include "node.h"
#include <fstream>

using namespace std;
using namespace BEM_NODE;

int main(void){

  cout << "This program is written to test the class BEM_NODE." << endl
       << "Main purpose of BEM is contain the coordinate of node." << endl << endl;

   fstream fout;
   fout.open("./data.dat");

   DATA_TYPE pos[3] ={10., 20., 30.};

   cout << "Start" << endl;
   Node_2D::info_class(); // 0 ticket, 2 dof
   cout << "Create five node instances" << endl;
   Node * my_class;
   Node_2D Nodes[5];

   my_class = Nodes;
   cout << "Base Class id " <<  my_class->get_id() << endl;
   my_class = (Nodes+1);
   cout << "Base Class id " <<  my_class->get_id() << endl;
   my_class = (Nodes+2);
   cout << "Base Class id " <<  my_class->get_id() << endl;
   my_class = (Nodes+3);
   cout << "Base Class id " <<  my_class->get_id() << endl;
   my_class = (Nodes+4);
   cout << "Base Class id " <<  my_class->get_id() << endl;

   {
     cout << endl << "nest" << endl;
     Node_2D test = *(Node_2D*)(my_class);
     Node_2D::info_class();
     test.info();
     if(test == *(Node_2D*)(my_class)){
       cout << "Test object is same with my_class" << endl;
       ((Node_2D*)my_class)->info();
     } else{
       cout << "Test object is not same with my_class" << endl;
     }

     my_class = (Nodes+3);
     if(test == *(Node_2D*)(my_class)){
       cout << "Test object is same with my_class" << endl;
       ((Node_2D*)my_class)->info();
     } else{
       cout << "Test object is not same with my_class" << endl;
       ((Node_2D*)my_class)->info();
     }
     cout << "nest-end" << endl;
   }

   cout << endl << "Print information of first instance" << endl;
   Nodes[0].info(); // 1 node [ 0, 0];
   Nodes[1].info(); // 2 node [ 0, 0];
   Nodes->info_class();

   cout << endl << "Make test" << endl;
   Node_2D test(pos);     // second constructor
   Node_2D::info_class(); // 6 ticket
   test.info();        // 6 node [10, 20];

   cout << endl << "Copy test 1" << endl;
   Nodes[0] = test; // 1 node is replaced by test;
   Node_2D::info_class(); // 6 ticket
   Nodes[0].info(); // 6 node [10,20]

  cout << endl << "Copy test2" << endl;
  Node_2D test1 = test;   // Copy constructor
  Node_2D::info_class(); // 7 ticket
  test1.info();       // 6 node [10, 20]

  cout << endl << "Print Information Table in \"./data.dat\"" << endl;
  for(int i=0; i < 5;++i){
    my_class = (Nodes+i);
    fout << " Pointer " << endl;
    ((Node_2D*)my_class)->info(fout); // check ./data.dat
    fout << " Array " << endl;
    Nodes[i].info(fout);
  }


  cout << endl << "Print Information Table in screen" << endl;
  for(int i=0; i < 5;++i)
    Nodes[i].info(cout); // compare the result with the one in ./data.dat

  cout << endl << "set_pos Test" << endl;
  Nodes[2].set_pos(x,100);
  Nodes[2].set_pos(y,200);
  Nodes[2].info();
  my_class = (Nodes+2);
  ((Node_2D*)(my_class))->info();
  ((Node_2D*)(my_class))->info(fout);


  //Nodes[2].set_pos(z,200); // if this line is un-commented, error will occur. Analysis
                              // dimension is set to two, currently.

  cout << endl << "get function tests " << endl;
  for(int i=0;i<5;i++){
    cout << "Class " << Nodes[i].get_name() << " ID " << Nodes[i].get_id()
         << " node's ticket number is " << Nodes[i].get_ticket() << " and its coordinates : " << endl;
    for(int j=0; j < Nodes[i].get_dof(); j++)
      cout << Nodes[i].get_pos(j) << " ";
    cout << endl;
  }

   fout.close();

  return 0;
}

#+END_SRC
